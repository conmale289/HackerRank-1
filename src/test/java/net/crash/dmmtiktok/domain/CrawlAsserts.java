package net.crash.dmmtiktok.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CrawlAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrawlAllPropertiesEquals(Crawl expected, Crawl actual) {
        assertCrawlAutoGeneratedPropertiesEquals(expected, actual);
        assertCrawlAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrawlAllUpdatablePropertiesEquals(Crawl expected, Crawl actual) {
        assertCrawlUpdatableFieldsEquals(expected, actual);
        assertCrawlUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrawlAutoGeneratedPropertiesEquals(Crawl expected, Crawl actual) {
        assertThat(expected)
            .as("Verify Crawl auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrawlUpdatableFieldsEquals(Crawl expected, Crawl actual) {
        assertThat(expected)
            .as("Verify Crawl relevant properties")
            .satisfies(e -> assertThat(e.getCrawledDate()).as("check crawledDate").isEqualTo(actual.getCrawledDate()))
            .satisfies(e -> assertThat(e.getSold()).as("check sold").isEqualTo(actual.getSold()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCrawlUpdatableRelationshipsEquals(Crawl expected, Crawl actual) {
        assertThat(expected)
            .as("Verify Crawl relationships")
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
